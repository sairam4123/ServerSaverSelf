// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using Cloner.Data.Saves;
//
//    var message = Message.FromJson(jsonString);
//    var member = Member.FromJson(jsonString);
//    var channel = Channel.FromJson(jsonString);
//    var role = Role.FromJson(jsonString);
//    var ban = Ban.FromJson(jsonString);
//    var guild = Guild.FromJson(jsonString);

namespace Cloner.Common
{
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using System;

    public partial class Save
    {
        public int SaveVersion { get; set; }
        public ulong SavedBy { get; set; }
        public long SaveTime { get; set; }
        public DateTime GetSaveTime()
        {
            return new DateTime(SaveTime, DateTimeKind.Utc);
        }

        //Contains role objects.
        public GuildParentData.Guild Guild { get; set; }
        public List<ChannelData.Channel> Channels { get; set; }
        public Dictionary<ulong, List<MessageData.Message>> ChannelMessages { get; set; }
        public List<BanData.Ban> Bans { get; set; }
        public List<MemberData.Member> Members { get; set; }

        public static readonly string ApiEndpoint = "https://discordapp.com/api";

        public static Save FromString(string content)
        {
            var decompressed = StringCompressor.DecompressString(content);
            try
            {
                return JsonConvert.DeserializeObject<Save>(decompressed);
            }
            catch
            {
                return null;
            }
        }

        public partial class MeData
        {
            [JsonProperty("id")]
            public ulong Id { get; set; }

            [JsonProperty("username")]
            public string Username { get; set; }

            [JsonProperty("avatar")]
            public string Avatar { get; set; }

            [JsonProperty("discriminator")]
            public string Discriminator { get; set; }

            [JsonProperty("email")]
            public string Email { get; set; }

            [JsonProperty("verified")]
            public bool Verified { get; set; }

            [JsonProperty("locale")]
            public string Locale { get; set; }

            [JsonProperty("mfa_enabled")]
            public bool MfaEnabled { get; set; }

            [JsonProperty("phone")]
            public object Phone { get; set; }

            [JsonProperty("flags")]
            public long Flags { get; set; }
        }
    }
}
